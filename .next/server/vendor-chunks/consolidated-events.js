"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/consolidated-events";
exports.ids = ["vendor-chunks/consolidated-events"];
exports.modules = {

/***/ "(ssr)/./node_modules/consolidated-events/lib/index.esm.js":
/*!***********************************************************!*\
  !*** ./node_modules/consolidated-events/lib/index.esm.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addEventListener: () => (/* binding */ addEventListener)\n/* harmony export */ });\nvar CAN_USE_DOM = !!( false && 0);\n// Adapted from Modernizr\n// https://github.com/Modernizr/Modernizr/blob/acb3f0d9/feature-detects/dom/passiveeventlisteners.js#L26-L37\nfunction testPassiveEventListeners() {\n    if (!CAN_USE_DOM) {\n        return false;\n    }\n    if (!window.addEventListener || !window.removeEventListener || !Object.defineProperty) {\n        return false;\n    }\n    var supportsPassiveOption = false;\n    try {\n        var opts = Object.defineProperty({}, \"passive\", {\n            // eslint-disable-next-line getter-return\n            get: function() {\n                function get() {\n                    supportsPassiveOption = true;\n                }\n                return get;\n            }()\n        });\n        var noop = function noop() {};\n        window.addEventListener(\"testPassiveEventSupport\", noop, opts);\n        window.removeEventListener(\"testPassiveEventSupport\", noop, opts);\n    } catch (e) {\n    // do nothing\n    }\n    return supportsPassiveOption;\n}\nvar memoized = void 0;\nfunction canUsePassiveEventListeners() {\n    if (memoized === undefined) {\n        memoized = testPassiveEventListeners();\n    }\n    return memoized;\n}\nfunction normalizeEventOptions(eventOptions) {\n    if (!eventOptions) {\n        return undefined;\n    }\n    if (!canUsePassiveEventListeners()) {\n        // If the browser does not support the passive option, then it is expecting\n        // a boolean for the options argument to specify whether it should use\n        // capture or not. In more modern browsers, this is passed via the `capture`\n        // option, so let's just hoist that value up.\n        return !!eventOptions.capture;\n    }\n    return eventOptions;\n}\n/* eslint-disable no-bitwise */ /**\n * Generate a unique key for any set of event options\n */ function eventOptionsKey(normalizedEventOptions) {\n    if (!normalizedEventOptions) {\n        return 0;\n    }\n    // If the browser does not support passive event listeners, the normalized\n    // event options will be a boolean.\n    if (normalizedEventOptions === true) {\n        return 100;\n    }\n    // At this point, the browser supports passive event listeners, so we expect\n    // the event options to be an object with possible properties of capture,\n    // passive, and once.\n    //\n    // We want to consistently return the same value, regardless of the order of\n    // these properties, so let's use binary maths to assign each property to a\n    // bit, and then add those together (with an offset to account for the\n    // booleans at the beginning of this function).\n    var capture = normalizedEventOptions.capture << 0;\n    var passive = normalizedEventOptions.passive << 1;\n    var once = normalizedEventOptions.once << 2;\n    return capture + passive + once;\n}\nfunction ensureCanMutateNextEventHandlers(eventHandlers) {\n    if (eventHandlers.handlers === eventHandlers.nextHandlers) {\n        // eslint-disable-next-line no-param-reassign\n        eventHandlers.nextHandlers = eventHandlers.handlers.slice();\n    }\n}\nfunction TargetEventHandlers(target) {\n    this.target = target;\n    this.events = {};\n}\nTargetEventHandlers.prototype.getEventHandlers = function() {\n    function getEventHandlers(eventName, options) {\n        var key = String(eventName) + \" \" + String(eventOptionsKey(options));\n        if (!this.events[key]) {\n            this.events[key] = {\n                handlers: [],\n                handleEvent: undefined\n            };\n            this.events[key].nextHandlers = this.events[key].handlers;\n        }\n        return this.events[key];\n    }\n    return getEventHandlers;\n}();\nTargetEventHandlers.prototype.handleEvent = function() {\n    function handleEvent(eventName, options, event) {\n        var eventHandlers = this.getEventHandlers(eventName, options);\n        eventHandlers.handlers = eventHandlers.nextHandlers;\n        eventHandlers.handlers.forEach(function(handler) {\n            if (handler) {\n                // We need to check for presence here because a handler function may\n                // cause later handlers to get removed. This can happen if you for\n                // instance have a waypoint that unmounts another waypoint as part of an\n                // onEnter/onLeave handler.\n                handler(event);\n            }\n        });\n    }\n    return handleEvent;\n}();\nTargetEventHandlers.prototype.add = function() {\n    function add(eventName, listener, options) {\n        var _this = this;\n        // options has already been normalized at this point.\n        var eventHandlers = this.getEventHandlers(eventName, options);\n        ensureCanMutateNextEventHandlers(eventHandlers);\n        if (eventHandlers.nextHandlers.length === 0) {\n            eventHandlers.handleEvent = this.handleEvent.bind(this, eventName, options);\n            this.target.addEventListener(eventName, eventHandlers.handleEvent, options);\n        }\n        eventHandlers.nextHandlers.push(listener);\n        var isSubscribed = true;\n        var unsubscribe = function() {\n            function unsubscribe() {\n                if (!isSubscribed) {\n                    return;\n                }\n                isSubscribed = false;\n                ensureCanMutateNextEventHandlers(eventHandlers);\n                var index = eventHandlers.nextHandlers.indexOf(listener);\n                eventHandlers.nextHandlers.splice(index, 1);\n                if (eventHandlers.nextHandlers.length === 0) {\n                    // All event handlers have been removed, so we want to remove the event\n                    // listener from the target node.\n                    if (_this.target) {\n                        // There can be a race condition where the target may no longer exist\n                        // when this function is called, e.g. when a React component is\n                        // unmounting. Guarding against this prevents the following error:\n                        //\n                        //   Cannot read property 'removeEventListener' of undefined\n                        _this.target.removeEventListener(eventName, eventHandlers.handleEvent, options);\n                    }\n                    eventHandlers.handleEvent = undefined;\n                }\n            }\n            return unsubscribe;\n        }();\n        return unsubscribe;\n    }\n    return add;\n}();\nvar EVENT_HANDLERS_KEY = \"__consolidated_events_handlers__\";\n// eslint-disable-next-line import/prefer-default-export\nfunction addEventListener(target, eventName, listener, options) {\n    if (!target[EVENT_HANDLERS_KEY]) {\n        // eslint-disable-next-line no-param-reassign\n        target[EVENT_HANDLERS_KEY] = new TargetEventHandlers(target);\n    }\n    var normalizedEventOptions = normalizeEventOptions(options);\n    return target[EVENT_HANDLERS_KEY].add(eventName, listener, normalizedEventOptions);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/consolidated-events/lib/index.esm.js\n");

/***/ })

};
;